#!/usr/bin/env bash

# script to run an Apache instance with external config using Docker image with centos7 / Apache / PHP 
# m.opitz@qmul.ac.uk | 2017-11-27
if [[ $EUID -ne 0 ]]; then
   echo "SORRY! This script must be run as root/superuser!" 
   exit 1
fi


echo v.1.3
# v.0.1 - added hostmane to container
# v.0.2 - now removing all other multihost container when starting a new one and serving php5.6 over 80 / 443
# v.0.3 - now using setup details  to make changes easier
# v.0.4 - now reading setup details from /etc/multihost.conf and creating reboot_multihost command script
# v.0.5 - renamed reboot_multihost to restart_multihost
# v.0.6 - installing scripts into /usr/local/bin instead of /usr/sbin
# v.1.0 - working release
# v.1.1 - using $command_path from multihost.conf now
# v.1.2 - now using/starting cron , using IP of host as environment variable inside the docker containers
# v.1.3 - installing crontab from ${moodledata_path}/moodle_crontab if present , checking for superuser rights

usage() { echo "Usage: $0 [-o<c/u>] [-p<7/5>]" 1>&2; exit 1; }

# check for the config file and get the settings
if [ ! -f /etc/multihost.conf ]
        then
        echo "ERROR! Could not read configuration file at /etc/multihost.conf - aborting!"
        exit 1
fi
. /etc/multihost.conf

# get ip address of machine the docker containers are running on
ip=$(hostname -i)
echo "--> Running on IP address $ip"

# get options
while getopts ":p:o:" x; do
    case "${x}" in
        o)
            o=${OPTARG}
            ;;
        p)
            p=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# if option -p5 is set use PHP 5.6 otherwise use PHP 7 by default
if [ "${p}" == "5" ]
	then
	php_v=56
	port=80
	ssl_port=443
else
	php_v=7
	port=80
	ssl_port=443
fi

# remove any exsiting multihost container, running or not
docker rm -f multihost_centos7_php7_httpd >/dev/null 2>/dev/null
docker rm -f multihost_centos7_php56_httpd >/dev/null 2>/dev/null
docker rm -f multihost_ubuntu_php7_apache2 >/dev/null 2>/dev/null
docker rm -f multihost_ubuntu_php56_apache2 >/dev/null 2>/dev/null

# check if an option is set to use Ubuntu as OS otherwise use Centos by default
if [ "${o}" == "u" ]
	then
	os=ubuntu_php${php_v}_apache2
	conf_path=/etc/apache2/sites-enabled
	servername=multihost_${os}

#	docker rm -f ${servername} >/dev/null 2>/dev/null
	docker run -itd \
		--name ${servername} \
		-h ${servername} \
		-p ${port}:80 \
		-p ${ssl_port}:443 \
		-v ${sites_enabled_path}:${conf_path} \
		-v ${www_path}:/var/www \
		-v ${moodledata_path}:/var/moodledata \
		-v ${filedir_path}:/filedir \
		-v ${xchange_path}:/xchange \
		-e HOST_IP_ADDR=$ip \
		--add-host db_host:${db_host_ip} \
		${os}
	docker exec ${servername} service apache2 restart
	echo "docker exec ${servername} service apache2 restart">${command_path}/restart_multihost
else
	os=centos7_php${php_v}_httpd
	conf_path=/etc/httpd/sites-enabled
	servername=multihost_${os}

#	docker rm -f ${servername} >/dev/null 2>/dev/null
	docker run -itd \
		--privileged=true \
		--name ${servername} \
		-h ${servername} \
		-p ${port}:80 \
		-p ${ssl_port}:443 \
		-v /sys/fs/cgroup:/sys/fs/cgroup:ro \
		-v ${sites_enabled_path}:${conf_path} \
		-v ${www_path}:/var/www \
		-v ${moodledata_path}:/var/moodledata \
		-v ${filedir_path}:/filedir \
		-v ${xchange_path}:/xchange \
		-e HOST_IP_ADDR=$ip \
		--add-host db_host:${db_host_ip} \
		${os}
	docker exec ${servername} systemctl start crond
	docker exec ${servername} systemctl restart httpd
	echo "docker exec ${servername} systemctl restart httpd">${command_path}/restart_multihost
fi

# install the crontab
if [ -f ${moodledata_path}/moodle_crontab ]
	then
	docker exec ${servername} crontab /var/moodledata/moodle_crontab
	echo "docker exec ${servername} crontab /var/moodledata/moodle_crontab">>${command_path}/restart_multihost
fi

# write the ip address of host to a file 'ip.txt' inside the 'multihost-help' VHOST
if [ -d $www_path/multihost-help ]
	then
	echo $ip > $www_path/multihost-help/ip.txt
	chmod 755 $www_path/multihost-help/ip.txt
fi

echo now running ${servername}
